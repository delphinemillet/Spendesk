{"version":3,"sources":["logo.png","serviceWorker.js","redux/reducers/users.js","redux/actions/users.js","redux/reducers/index.js","redux/store/index.js","components/dropzone/dropzone.jsx","components/table/table.jsx","screens/users/users.jsx","screens/users/users.constants.js","screens/users/users.container.js","App.js","index.js"],"names":["module","exports","__webpack_require__","p","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","defaultState","header","data","users","arguments","length","undefined","_ref","type","payload","Object","objectSpread","_payload$position","position","row","index","newState","value","rootReducer","combineReducers","configureStore","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","Dropzone","accept","onDrop","multiple","children","react_default","a","createElement","dist_es","className","defaultProps","Table","content","onChange","map","title","key","concat","i","j","defaultValue","event","Users","editUser","Fragment","dropzone","table","USERS_HEADERS","FIRST_NAME","LAST_NAME","GENDER","EMAIL_ADDRESS","PHONE_NUMBER","connect","_state$users","dispatch","accepted","files","forEach","file","reader","FileReader","onload","_reader$result$split","result","split","_reader$result$split2","toArray","slice","setHeader","pop","c","setContent","onabort","onerror","readAsBinaryString","target","Component","App","src","logo","alt","users_container","ReactDOM","render","es","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.78fffeac.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a34bd251.png\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { SET_HEADER, SET_CONTENT, EDIT_USER } from \"../actions/users\";\n\nconst defaultState = {\n  header: [],\n  data: []\n};\n\nlet users = (state = defaultState, { type, payload }) => {\n  switch (type) {\n    case SET_HEADER:\n      return {\n        ...state,\n        header: payload\n      };\n\n    case SET_CONTENT:\n      return {\n        ...state,\n        data: payload\n      };\n\n    case EDIT_USER: {\n      const { row, index } = payload.position;\n      const newState = state.data;\n      newState[row][index] = payload.value;\n      return {\n        ...state,\n        data: newState\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default users;\n","export const IMPORT_USERS = \"IMPORT_USERS\";\n\nexport const SET_HEADER = \"SET_HEADER\";\nexport const setHeader = (header = []) => ({\n  type: SET_HEADER,\n  payload: header\n});\n\nexport const SET_CONTENT = \"SET_CONTENT\";\nexport const setContent = (content = []) => ({\n  type: SET_CONTENT,\n  payload: content\n});\n\nexport const importUsers = files => dispatch => {\n  files.forEach(file => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      const [header, ...content] = reader.result.split(\"\\n\");\n      dispatch(setHeader(header.split(\",\")));\n      content.pop();\n      const data = content.map(c => c.split(\",\"));\n      dispatch(setContent(data));\n    };\n    reader.onabort = () => console.log(\"file reading was aborted\");\n    reader.onerror = () => console.log(\"file reading has failed\");\n    reader.readAsBinaryString(file);\n  });\n};\n\nexport const EDIT_USER = \"EDIT_USER\";\nexport const editUser = ({ value, position }) => ({\n  type: EDIT_USER,\n  payload: { value, position }\n});\n","import { combineReducers } from \"redux\";\nimport users from \"./users\";\n\nconst rootReducer = combineReducers({\n  users\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"../reducers\";\n\nconst configureStore = () => {\n  const composeEnhancers =\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n  const store = createStore(\n    rootReducer,\n    /* preloadedState, */ composeEnhancers(applyMiddleware(thunk))\n  );\n  return {\n    ...store\n  };\n};\n\nexport default configureStore;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport DropzoneComponent from \"react-dropzone\";\nimport \"./dropzone.styles.css\";\n\nconst Dropzone = ({ accept, onDrop, multiple, children }) => (\n  <DropzoneComponent\n    className=\"dropzone-component\"\n    accept={accept}\n    onDrop={onDrop}\n    multiple={multiple}\n  >\n    <p>Drop your file here, or click to select file to upload.</p>\n    {children}\n  </DropzoneComponent>\n);\n\nDropzone.propTypes = {\n  accept: PropTypes.string,\n  onDrop: PropTypes.func,\n  multiple: PropTypes.bool,\n  children: PropTypes.node\n};\n\nDropzone.defaultProps = {\n  accept: \"\",\n  onDrop: undefined,\n  multiple: false,\n  children: null\n};\n\nexport default Dropzone;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./table.styles.css\";\n\nconst Table = ({ header, content, onChange }) => (\n  <table className=\"table-component\">\n    <thead>\n      <tr>\n        {header.map((title, index) => (\n          <th key={`title${index}`}>{title}</th>\n        ))}\n      </tr>\n    </thead>\n    <tbody>\n      {content.map(\n        (row, i) =>\n          row.length > 0 && (\n            <tr key={`row${i}`}>\n              {row.map((value, j) => (\n                <td key={j}>\n                  <input\n                    type=\"text\"\n                    defaultValue={value}\n                    onChange={event => onChange(event, i, j)}\n                  />\n                </td>\n              ))}\n            </tr>\n          )\n      )}\n    </tbody>\n  </table>\n);\n\nTable.propTypes = {\n  header: PropTypes.array,\n  content: PropTypes.array,\n  onChange: PropTypes.func\n};\n\nTable.defaultProps = {\n  header: [],\n  content: [],\n  onChange: undefined\n};\n\nexport default Table;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Dropzone from \"../../components/dropzone\";\nimport Table from \"../../components/table\";\n\nconst Users = ({ header, data, onDrop, editUser }) => (\n  <React.Fragment>\n    <h1>Invite your collaborators</h1>\n\n    <Dropzone accept=\"text/csv\" onDrop={onDrop}>\n      <p>Only CSV files will be accepted</p>\n    </Dropzone>\n\n    <Table header={header} content={data} onChange={editUser} />\n  </React.Fragment>\n);\n\nUsers.propTypes = {\n  header: PropTypes.array,\n  data: PropTypes.array,\n  onDrop: PropTypes.func\n};\n\nUsers.defaultProps = {\n  header: [],\n  data: [],\n  onDrop: undefined\n};\n\nexport default Users;\n","export const USERS_HEADERS = {\n  FIRST_NAME: \"first name\",\n  LAST_NAME: \"last name\",\n  GENDER: \"gender\",\n  EMAIL_ADDRESS: \"email address\",\n  PHONE_NUMBER: \"phone number\"\n};\n","import { connect } from \"react-redux\";\nimport Component from \"./users\";\nimport { USERS_HEADERS } from \"./users.constants\";\nimport { importUsers, editUser } from \"../../redux/actions/users\";\n\nconst mapStateToProps = state => {\n  const { header, data } = state.users;\n  return {\n    header: header.map(title => USERS_HEADERS[title]),\n    data\n  };\n};\nconst mapDispatchToProps = dispatch => ({\n  onDrop: accepted => dispatch(importUsers(accepted)),\n  editUser: (event, row, index) =>\n    dispatch(editUser({ value: event.target.value, position: { row, index } }))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Component);\n","import React, { Component } from \"react\";\n\nimport Users from \"./screens/users\";\nimport logo from \"./logo.png\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <img src={logo} className=\"App-logo\" alt=\"spendesk\" />\n        <Users />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport configureStore from \"./redux/store\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.register();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}